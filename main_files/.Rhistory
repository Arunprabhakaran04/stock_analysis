knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("syuzhet")) install.packages("syuzhet")
if (!require("lubridate")) install.packages("lubridate")
if (!require("tqdm")) install.packages("tqdm")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("syuzhet")) install.packages("syuzhet")
if (!require("lubridate")) install.packages("lubridate")
library(tidyverse)
library(syuzhet)  # For sentiment analysis
library(lubridate)
compound_scores <- function(df) {
# Initialize an empty vector to store compound scores
result <- numeric(nrow(df))
# Loop through each row in the dataframe with a progress bar
for (i in 1:nrow(df)) {
text <- df$title[i]
# Get sentiment scores using syuzhet
sentiment <- get_sentiment(text, method = "syuzhet")
# Store the compound score
# Note: syuzhet doesn't have a direct equivalent to VADER's compound score
# so we're using the basic sentiment score provided by syuzhet
result[i] <- sentiment
}
# Add the compound scores to the dataframe
df$compound <- result
# Remove the title column
df$title <- NULL
# Group by date and calculate mean compound score
df_summary <- df %>%
group_by(date) %>%
summarize(compound = mean(compound, na.rm = TRUE))
return(df_summary)
}
df <- read.csv("D:\\R\\stock_sentiment_analysis\\main_files\\HSB_sentiment.csv", stringsAsFactors = FALSE)
df$date <- as.Date(df$date)
df_result <- compound_scores(df)
# View the result
print(df_result)
ggplot(df_result, aes(x = date, y = compound)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Sentiment Analysis of Stock News",
x = "Date",
y = "Compound Sentiment Score",
caption = "Source: HSB_sentiment.csv") +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y")
df_historic = read.csv("D:\\R\\stock_sentiment_analysis\\stock_data_preprocessed_HDFCBANK.NS.csv")
print(head(df_historic))
df_result$date <- as.Date(df_result$date)
df_historic$Date <- as.Date(df_historic$Date)
data <- merge(df_historic, df_result, by.x = "Date", by.y = "date", all.x = TRUE)
data$compound[is.na(data$compound)] <- 0
head(data)
data$Date <- as.Date(data$Date)
dates <- data$Date
print(head(data))
if (!require("xgboost")) install.packages("xgboost")
if (!require("caret")) install.packages("caret")
if (!require("Metrics")) install.packages("Metrics")
if (!require("ggplot2")) install.packages("ggplot2")
library(xgboost)
library(caret)
library(Metrics)
library(ggplot2)
y <- data$Close
X <- data[, !colnames(data) %in% c("Close", "Date")]
n <- nrow(data)
test_size <- 50
# Create train and test sets
X_train <- X[1:(n-test_size), ]
y_train <- y[1:(n-test_size)]
X_test <- X[(n-test_size+1):n, ]
y_test <- y[(n-test_size+1):n]
dtrain <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
dtest <- xgb.DMatrix(data = as.matrix(X_test), label = y_test)
params <- list(
objective = "reg:squarederror",
eval_metric = "rmse"
)
epochs <- 100
model <- xgb.train(
params = params,
data = dtrain,
nrounds = epochs
)
y_pred <- predict(model, dtest)
print(y_pred)
rmse_value <- rmse(y_test, y_pred)
print(paste("Root Mean Squared Error:", round(rmse_value, 4)))
plot_data <- data.frame(
Date = tail(dates, test_size),
Actual = y_test,
Predicted = y_pred
)
plot_data_long <- tidyr::pivot_longer(
plot_data,
cols = c("Actual", "Predicted"),
names_to = "Type",
values_to = "Price"
)
ggplot(plot_data_long, aes(x = as.Date(Date), y = Price, color = Type, group = Type)) +
geom_line() +
scale_color_manual(values = c("Actual" = "blue", "Predicted" = "red")) +
labs(
title = "Predicted vs. Actual Stock Prices",
x = "Date",
y = "Close Price"
) +
theme_minimal() +
theme(legend.position = "bottom")
#Feature Importance -
importance <- xgb.importance(feature_names = colnames(X_train), model = model)
xgb.plot.importance(importance, top_n = 10)
#install.packages("keras")
library(keras)
install_keras()
knitr::opts_chunk$set(echo = TRUE)
library(reticulate)
# Let reticulate install Python 3.10 and set it up
install_python(version = "3.10.13")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("syuzhet")) install.packages("syuzhet")
if (!require("lubridate")) install.packages("lubridate")
library(tidyverse)
library(syuzhet)  # For sentiment analysis
library(lubridate)
compound_scores <- function(df) {
# Initialize an empty vector to store compound scores
result <- numeric(nrow(df))
# Loop through each row in the dataframe with a progress bar
for (i in 1:nrow(df)) {
text <- df$title[i]
# Get sentiment scores using syuzhet
sentiment <- get_sentiment(text, method = "syuzhet")
# Store the compound score
# Note: syuzhet doesn't have a direct equivalent to VADER's compound score
# so we're using the basic sentiment score provided by syuzhet
result[i] <- sentiment
}
# Add the compound scores to the dataframe
df$compound <- result
# Remove the title column
df$title <- NULL
# Group by date and calculate mean compound score
df_summary <- df %>%
group_by(date) %>%
summarize(compound = mean(compound, na.rm = TRUE))
return(df_summary)
}
df <- read.csv("D:\\R\\stock_sentiment_analysis\\main_files\\HSB_sentiment.csv", stringsAsFactors = FALSE)
df_result <- compound_scores(df)
# View the result
print(df_result)
ggplot(df_result, aes(x = date, y = compound)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Sentiment Analysis of Stock News",
x = "Date",
y = "Compound Sentiment Score",
caption = "Source: HSB_sentiment.csv") +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y")
df$date <- as.Date(df$date)
df_result <- compound_scores(df)
# View the result
print(df_result)
ggplot(df_result, aes(x = date, y = compound)) +
geom_line() +
geom_point() +
theme_minimal() +
labs(title = "Sentiment Analysis of Stock News",
x = "Date",
y = "Compound Sentiment Score",
caption = "Source: HSB_sentiment.csv") +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y")
df_historic = read.csv("D:\\R\\stock_sentiment_analysis\\stock_data_preprocessed_HDFCBANK.NS.csv")
print(head(df_historic))
df_result$date <- as.Date(df_result$date)
df_historic$Date <- as.Date(df_historic$Date)
data <- merge(df_historic, df_result, by.x = "Date", by.y = "date", all.x = TRUE)
write.csv(data, "D:\\R\\stock_sentiment_analysis\\Merged_data_HSB.csv")
